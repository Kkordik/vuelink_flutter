# Task ID: 1
# Title: Implement BLE Advertisement Transmission and Reception System
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create a complete system for transmitting, receiving, and forwarding messages using only BLE advertisements, with support for different message types and multi-part messages.
# Details:
Implement using Flutter with BLE libraries for both advertisement transmission and scanning. Create a service that constructs BLE advertisement packets containing structured message data based on different message types: 1. General Basic Message (preloaded with message ID and repeat flag) 2. General Text Message (multi-part with text content) 3. Flight Update Message (preloaded with flight ID and message ID) 4. Flight Update General (multi-part with flight ID and text content) Implement a transmission strategy that broadcasts each advertisement for approximately 3 seconds before stopping. For multi-part messages, send each part as a separate, sequential advertisement. Develop a receiving system that scans for advertisements, processes them according to type, and forwards them once (unless already seen or configured not to repeat). Implement reassembly of multi-part messages before processing or forwarding them.

# Test Strategy:
Test advertisement packet construction for all message types. Verify transmission and reception between multiple devices. Test multi-part message assembly and validation. Confirm forwarding behavior respects repeat flags and deduplication.

# Subtasks:
## 1. Set up Flutter BLE peripheral library integration [done]
### Dependencies: None
### Description: Research, select, and integrate the appropriate Flutter BLE library that supports peripheral mode on Android. Configure project dependencies and permissions.
### Details:
Evaluate flutter_blue_plus, flutter_reactive_ble, and other options to determine which best supports Android peripheral mode. Add the chosen library to pubspec.yaml. Configure AndroidManifest.xml with required BLE permissions (BLUETOOTH, BLUETOOTH_ADMIN, ACCESS_FINE_LOCATION, etc.). Create a BleService class that will serve as the interface for all BLE functionality. Test basic BLE availability detection on Android devices.

## 2. Design and implement message type data structures [in-progress]
### Dependencies: 1.1
### Description: Create the data structures for different message types including General Basic, General Text, Flight Update, and Flight Update General messages.
### Details:
Implement a MessageTypeFactory class that defines the structure for each message type. Create data models for: General Basic Message (message ID, repeat flag), General Text Message (message ID, part number, total parts, text content), Flight Update Message (flight ID, message ID, update type), and Flight Update General (flight ID, message ID, part number, total parts, text content). Implement validation for each message type to ensure data integrity. Add serialization/deserialization methods to convert between message objects and byte arrays for advertisement packets.

## 3. Implement BLE advertisement packet construction [pending]
### Dependencies: 1.2
### Description: Create the functionality to construct BLE advertisement packets for different message types within size constraints.
### Details:
Implement a PacketBuilder class that constructs advertisement data for each message type. Create efficient byte packing methods to maximize data within advertisement size limits. Implement multi-part message splitting for text content that exceeds single packet size. Create utility methods to add message type identifiers, sequence numbers for multi-part messages, and repeat flags. Implement validation to ensure packet size constraints are met. Add unit tests to verify correct packet construction and byte allocation for each message type.

## 4. Implement BLE advertisement transmission functionality [pending]
### Dependencies: 1.3
### Description: Create the core functionality to transmit BLE advertisements with timed broadcasting periods.
### Details:
Extend the BleService to include transmitMessage() methods for each message type. Implement timed broadcasting that advertises each packet for approximately 3 seconds before stopping. Create sequential transmission logic for multi-part messages. Implement transmission queuing for handling multiple messages. Add battery-aware throttling to reduce frequency when battery is low. Create a background service mechanism to maintain advertisements when app is in background (if supported by the chosen library). Implement error handling for devices that don't support peripheral mode. Add logging for debugging advertisement states.

## 5. Implement BLE scanning and message reception [pending]
### Dependencies: 1.3
### Description: Develop the functionality to scan for and receive BLE advertisements from other devices.
### Details:
Extend the BleService to include startScanning() and stopScanning() methods. Implement advertisement data parsing to extract message type and content. Create a message cache to track received message IDs and prevent duplicates. Implement multi-part message tracking and reassembly. Add callbacks to notify application code when complete messages are received. Create power-efficient scanning strategies with appropriate scan intervals and windows. Include platform-specific scanning optimizations for Android and iOS.

## 6. Implement message forwarding functionality [pending]
### Dependencies: 1.4, 1.5
### Description: Create the system for forwarding received messages based on repeat flags and deduplication logic.
### Details:
Implement a MessageForwardingManager class to handle message retransmission. Create logic to check repeat flags and only forward messages marked for repetition. Implement a seen-message cache to prevent forwarding duplicates. Add configurable forwarding behavior (enable/disable, maximum hops, etc.). Create a forwarding queue to manage pending retransmissions. Implement platform-specific forwarding limitations based on device capabilities. Add analytics to track message propagation through the network.

## 7. Create high-level API and platform-specific detection [pending]
### Dependencies: 1.4, 1.5, 1.6
### Description: Develop a simple API for application code to use the BLE messaging functionality and implement platform detection to ensure features work correctly on different devices.
### Details:
Create a VuelinkBleManager class with a clean API for application code. Implement methods like sendBasicMessage(), sendTextMessage(), sendFlightUpdate() that handle all the low-level details. Add platform detection to handle different capabilities between iOS and Android. Create a capability detection system to handle different Android versions and hardware capabilities. Implement graceful degradation for unsupported devices. Add comprehensive documentation and usage examples. Create integration tests that verify the entire flow from message creation to advertisement to reception and forwarding.

